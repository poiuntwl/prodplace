services:
  products-service:
    image: products-service
    build:
      context: ./ProductsService
      dockerfile: ./Dockerfile
    depends_on:
      db:
        condition: service_healthy
      rbmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - products_service
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    ports:
      - "8080:8080"
  db:
    build:
      context: ./db
      dockerfile: ./Dockerfile
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=Password123!!
      - SA_PASSWORD=Password123!!
    ports:
      - "1435:1433"
    networks:
      - products_service
    healthcheck:
      test: [ "CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P Password123!! -Q 'SELECT 1' || exit 1" ]
      interval: 10s
      retries: 10
      start_period: 20s
      timeout: 3s
  rbmq:
    image: rabbitmq:3-management
    container_name: prodplace-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=password
    networks:
      - products_service
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "check_port_connectivity" ]
      interval: 30s
      timeout: 10s
      retries: 5
  mongodb:
    build:
      context: ./mongo
      dockerfile: ./Dockerfile
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=adminpassword
    ports:
      - "27017:27017"
    volumes:
      - ./mongo/data:/data/db
    networks:
      - products_service
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5

volumes:
  rabbitmq_data:
    driver: local
  mongodb_data:
    driver: local

networks:
  products_service:
    driver: bridge