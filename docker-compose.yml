services:
  reverse-proxy:
    image: reverse-proxy
    build:
      context: .
      dockerfile: ./ProxyService/Dockerfile
    networks:
      - products-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    ports:
      - "8080:8080"

  products-service:
    image: products-service
    build:
      context: .
      dockerfile: ./ProductsService/Dockerfile
    depends_on:
      products-db:
        condition: service_healthy
      rbmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8080/health || exit 1" ]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 10s
    networks:
      - products-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    expose:
      - "8080"

  price-service:
    image: price-service
    build:
      context: .
      dockerfile: ./PriceService/Dockerfile
    networks:
      - products-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Development

  currency-rates-service:
    image: currency-rates-service
    build:
      context: .
      dockerfile: ./CurrencyRatesService/Dockerfile
    depends_on:
      currencies-db:
        condition: service_healthy
      redis-cache:
        condition: service_healthy
    networks:
      - products-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Development

  playground-service:
    image: playground-service
    build:
      context: .
      dockerfile: ./PlaygroundService/Dockerfile
    depends_on:
      redis-cache:
        condition: service_healthy
    networks:
      - products-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Development

  products-db:
    build:
      context: ./dbs/products
      dockerfile: ./Dockerfile
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=Password123!!
      - SA_PASSWORD=Password123!!
    ports:
      - "5400:1433"
    networks:
      - products-service
    volumes:
      - products-db-data:/var/opt/mssql
    healthcheck:
      test: /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "$$SA_PASSWORD" -Q "IF DB_ID('ProductsDB') IS NOT NULL SELECT 1 ELSE SELECT 0" || exit 1
      interval: 5s
      retries: 15
      start_period: 10s
      timeout: 3s

  currencies-db:
    build:
      context: ./dbs/currencies
      dockerfile: ./Dockerfile
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=Password123!!
      - SA_PASSWORD=Password123!!
    ports:
      - "5401:1433"
    networks:
      - products-service
    volumes:
      - currencies-db-data:/var/opt/mssql
    healthcheck:
      test: /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "$$SA_PASSWORD" -Q "IF DB_ID('HangfireDB') IS NOT NULL and DB_ID('HangfireDB') IS NOT NULL SELECT 1 ELSE SELECT 0" || exit 1
      interval: 5s
      retries: 15
      start_period: 10s
      timeout: 3s

  rbmq:
    image: rabbitmq:3-management
    container_name: prodplace-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=password
    networks:
      - products-service
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "check_port_connectivity" ]
      interval: 5s
      timeout: 10s
      retries: 10

  mongodb:
    build:
      context: ./mongo
      dockerfile: ./Dockerfile
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=adminpassword
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
    networks:
      - products-service
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 10s

  redis-cache:
    build:
      context: ./redis-cache
      dockerfile: ./Dockerfile
    ports:
      - "6379:6379"
    volumes:
      - redis-cache-data:/data/db
    networks:
      - products-service
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 10s


volumes:
  rabbitmq-data:
    driver: local
  mongodb-data:
    driver: local
  products-db-data:
    driver: local
  currencies-db-data:
    driver: local
  redis-cache-data:
    driver: local


networks:
  products-service:
    driver: bridge