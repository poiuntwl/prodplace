services:
  products-service:
    image: products-service
    build:
      context: .
      dockerfile: ./ProductsService/Dockerfile
    depends_on:
      db:
        condition: service_healthy
      rbmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8080/health || exit 1" ]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 10s
    networks:
      - products_service
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    ports:
      - "8080:8080"
  price-service:
    image: price-service
    build:
      context: .
      dockerfile: ./PriceService/Dockerfile
    depends_on:
      db:
        condition: service_healthy
      products-service:
        condition: service_healthy
    networks:
      - products_service
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    ports:
      - "8081:8080"
  currency-rates-service:
    image: currency-rates-service
    build:
      context: .
      dockerfile: ./CurrencyRatesService/Dockerfile
    depends_on:
      db:
        condition: service_healthy
      products-service:
        condition: service_healthy
    networks:
      - products_service
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    ports:
      - "8082:8080"
  db:
    build:
      context: ./db
      dockerfile: ./Dockerfile
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=Password123!!
      - SA_PASSWORD=Password123!!
    ports:
      - "1435:1433"
    networks:
      - products_service
    healthcheck:
      test: /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "$$SA_PASSWORD" -Q "IF DB_ID('ProductsDB') IS NOT NULL and DB_ID('HangfireDB') IS NOT NULL SELECT 1 ELSE SELECT 0" || exit 1
      interval: 5s
      retries: 15
      start_period: 10s
      timeout: 3s
  rbmq:
    image: rabbitmq:3-management
    container_name: prodplace-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=password
    networks:
      - products_service
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "check_port_connectivity" ]
      interval: 5s
      timeout: 10s
      retries: 10
  mongodb:
    build:
      context: ./mongo
      dockerfile: ./Dockerfile
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=adminpassword
    ports:
      - "27017:27017"
    volumes:
      - ./mongo/data:/data/db
    networks:
      - products_service
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 10s

volumes:
  rabbitmq_data:
    driver: local
  mongodb_data:
    driver: local

networks:
  products_service:
    driver: bridge